{"version":3,"names":["_scope","require","_scopeflags","_parseError","TypeScriptScope","Scope","tsNames","Map","TypeScriptScopeHandler","ScopeHandler","importsStack","createScope","flags","push","Set","enter","ScopeFlag","TS_MODULE","exit","pop","hasImport","name","allowShadow","len","length","has","i","declareName","bindingType","loc","BindingFlag","FLAG_TS_IMPORT","parser","raise","Errors","VarRedeclaration","identifierName","add","scope","currentScope","type","get","FLAG_TS_EXPORT_ONLY","maybeExportDefined","set","KIND_TYPE","KIND_VALUE","checkRedeclarationInScope","FLAG_TS_ENUM","FLAG_TS_CONST_ENUM","FLAG_CLASS","isRedeclaredInScope","isConst","wasConst","names","NameType","Lexical","checkLocalExport","id","scopeStack","exports","default"],"sources":["../../../src/plugins/typescript/scope.ts"],"sourcesContent":["import type { Position } from \"../../util/location.ts\";\nimport ScopeHandler, { NameType, Scope } from \"../../util/scope.ts\";\nimport { BindingFlag, ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type * as N from \"../../types.ts\";\nimport { Errors } from \"../../parse-error.ts\";\n\nconst enum TsNameType {\n  Types = 1 << 0,\n  // enums (which are also in .types)\n  Enums = 1 << 1,\n  // const enums (which are also in .enums and .types)\n  ConstEnums = 1 << 2,\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  Classes = 1 << 3,\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  ExportOnlyBindings = 1 << 4,\n}\n\nclass TypeScriptScope extends Scope {\n  tsNames: Map<string, TsNameType> = new Map();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  importsStack: Set<string>[] = [];\n\n  createScope(flags: ScopeFlag): TypeScriptScope {\n    this.importsStack.push(new Set()); // Always keep the top-level scope for export checks.\n\n    return new TypeScriptScope(flags);\n  }\n\n  enter(flags: ScopeFlag): void {\n    if (flags === ScopeFlag.TS_MODULE) {\n      this.importsStack.push(new Set());\n    }\n\n    super.enter(flags);\n  }\n\n  exit() {\n    const flags = super.exit();\n\n    if (flags === ScopeFlag.TS_MODULE) {\n      this.importsStack.pop();\n    }\n\n    return flags;\n  }\n\n  hasImport(name: string, allowShadow?: boolean) {\n    const len = this.importsStack.length;\n    if (this.importsStack[len - 1].has(name)) {\n      return true;\n    }\n    if (!allowShadow && len > 1) {\n      for (let i = 0; i < len - 1; i++) {\n        if (this.importsStack[i].has(name)) return true;\n      }\n    }\n    return false;\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    if (bindingType & BindingFlag.FLAG_TS_IMPORT) {\n      if (this.hasImport(name, true)) {\n        this.parser.raise(Errors.VarRedeclaration, loc, {\n          identifierName: name,\n        });\n      }\n      this.importsStack[this.importsStack.length - 1].add(name);\n      return;\n    }\n\n    const scope = this.currentScope();\n    let type = scope.tsNames.get(name) || 0;\n\n    if (bindingType & BindingFlag.FLAG_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.tsNames.set(name, type | TsNameType.ExportOnlyBindings);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n\n    if (bindingType & BindingFlag.KIND_TYPE) {\n      if (!(bindingType & BindingFlag.KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      type = type | TsNameType.Types;\n    }\n    if (bindingType & BindingFlag.FLAG_TS_ENUM) {\n      type = type | TsNameType.Enums;\n    }\n    if (bindingType & BindingFlag.FLAG_TS_CONST_ENUM) {\n      type = type | TsNameType.ConstEnums;\n    }\n    if (bindingType & BindingFlag.FLAG_CLASS) {\n      type = type | TsNameType.Classes;\n    }\n    if (type) scope.tsNames.set(name, type);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    const type = scope.tsNames.get(name);\n    if ((type & TsNameType.Enums) > 0) {\n      if (bindingType & BindingFlag.FLAG_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BindingFlag.FLAG_TS_CONST_ENUM);\n        const wasConst = (type & TsNameType.ConstEnums) > 0;\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (\n      bindingType & BindingFlag.FLAG_CLASS &&\n      (type & TsNameType.Classes) > 0\n    ) {\n      if (scope.names.get(name) & NameType.Lexical) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BindingFlag.KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BindingFlag.KIND_TYPE && (type & TsNameType.Types) > 0) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(scope, name, bindingType);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n\n    if (this.hasImport(name)) return;\n\n    const len = this.scopeStack.length;\n    for (let i = len - 1; i >= 0; i--) {\n      const scope = this.scopeStack[i];\n      const type = scope.tsNames.get(name);\n      if (\n        (type & TsNameType.Types) > 0 ||\n        (type & TsNameType.ExportOnlyBindings) > 0\n      ) {\n        return;\n      }\n    }\n\n    super.checkLocalExport(id);\n  }\n}\n"],"mappings":"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","ignoreList":[]}