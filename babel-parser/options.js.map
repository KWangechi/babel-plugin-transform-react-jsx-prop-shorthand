{"version":3,"names":["OptionFlags","exports","AllowAwaitOutsideFunction","AllowReturnOutsideFunction","AllowNewTargetOutsideFunction","AllowImportExportEverywhere","AllowSuperOutsideMethod","AllowUndeclaredExports","Ranges","Tokens","CreateImportExpressions","CreateParenthesizedExpressions","ErrorRecovery","AttachComment","AnnexB","createDefaultOptions","sourceType","sourceFilename","undefined","startIndex","startColumn","startLine","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowNewTargetOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","plugins","strictMode","ranges","tokens","createImportExpressions","process","env","BABEL_8_BREAKING","createParenthesizedExpressions","errorRecovery","attachComment","annexB","getOptions","opts","options","Error","key","Object","keys"],"sources":["../src/options.ts"],"sourcesContent":["import type { Plugin } from \"./plugin-utils.ts\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport interface Options {\n  /**\n   * By default, import and export declarations can only appear at a program's top level.\n   * Setting this option to true allows them anywhere where a statement is allowed.\n   */\n  allowImportExportEverywhere?: boolean;\n\n  /**\n   * By default, await use is not allowed outside of an async function.\n   * Set this to true to accept such code.\n   */\n  allowAwaitOutsideFunction?: boolean;\n\n  /**\n   * By default, a return statement at the top level raises an error.\n   * Set this to true to accept such code.\n   */\n  allowReturnOutsideFunction?: boolean;\n\n  /**\n   * By default, new.target use is not allowed outside of a function or class.\n   * Set this to true to accept such code.\n   */\n  allowNewTargetOutsideFunction?: boolean;\n\n  allowSuperOutsideMethod?: boolean;\n\n  /**\n   * By default, exported identifiers must refer to a declared variable.\n   * Set this to true to allow export statements to reference undeclared variables.\n   */\n  allowUndeclaredExports?: boolean;\n\n  /**\n   * By default, Babel parser JavaScript code according to Annex B syntax.\n   * Set this to `false` to disable such behavior.\n   */\n  annexB?: boolean;\n\n  /**\n   * By default, Babel attaches comments to adjacent AST nodes.\n   * When this option is set to false, comments are not attached.\n   * It can provide up to 30% performance improvement when the input code has many comments.\n   * @babel/eslint-parser will set it for you.\n   * It is not recommended to use attachComment: false with Babel transform,\n   * as doing so removes all the comments in output code, and renders annotations such as\n   * /* istanbul ignore next *\\/ nonfunctional.\n   */\n  attachComment?: boolean;\n\n  /**\n   * By default, Babel always throws an error when it finds some invalid code.\n   * When this option is set to true, it will store the parsing error and\n   * try to continue parsing the invalid input file.\n   */\n  errorRecovery?: boolean;\n\n  /**\n   * Indicate the mode the code should be parsed in.\n   * Can be one of \"script\", \"module\", or \"unambiguous\". Defaults to \"script\".\n   * \"unambiguous\" will make @babel/parser attempt to guess, based on the presence\n   * of ES6 import or export statements.\n   * Files with ES6 imports and exports are considered \"module\" and are otherwise \"script\".\n   */\n  sourceType?: \"script\" | \"module\" | \"unambiguous\";\n\n  /**\n   * Correlate output AST nodes with their source filename.\n   * Useful when generating code and source maps from the ASTs of multiple input files.\n   */\n  sourceFilename?: string;\n\n  /**\n   * By default, all source indexes start from 0.\n   * You can provide a start index to alternatively start with.\n   * Useful for integration with other source tools.\n   */\n  startIndex?: number;\n\n  /**\n   * By default, the first line of code parsed is treated as line 1.\n   * You can provide a line number to alternatively start with.\n   * Useful for integration with other source tools.\n   */\n  startLine?: number;\n\n  /**\n   * By default, the parsed code is treated as if it starts from line 1, column 0.\n   * You can provide a column number to alternatively start with.\n   * Useful for integration with other source tools.\n   */\n  startColumn?: number;\n\n  /**\n   * Array containing the plugins that you want to enable.\n   */\n  plugins?: Plugin[];\n\n  /**\n   * Should the parser work in strict mode.\n   * Defaults to true if sourceType === 'module'. Otherwise, false.\n   */\n  strictMode?: boolean;\n\n  /**\n   * Adds a ranges property to each node: [node.start, node.end]\n   */\n  ranges?: boolean;\n\n  /**\n   * Adds all parsed tokens to a tokens property on the File node.\n   */\n  tokens?: boolean;\n\n  /**\n   * By default, the parser adds information about parentheses by setting\n   * `extra.parenthesized` to `true` as needed.\n   * When this option is `true` the parser creates `ParenthesizedExpression`\n   * AST nodes instead of using the `extra` property.\n   */\n  createParenthesizedExpressions?: boolean;\n\n  /**\n   * The default is false in Babel 7 and true in Babel 8\n   * Set this to true to parse it as an `ImportExpression` node.\n   * Otherwise `import(foo)` is parsed as `CallExpression(Import, [Identifier(foo)])`.\n   */\n  createImportExpressions?: boolean;\n}\n\nexport const enum OptionFlags {\n  AllowAwaitOutsideFunction = 1 << 0,\n  AllowReturnOutsideFunction = 1 << 1,\n  AllowNewTargetOutsideFunction = 1 << 2,\n  AllowImportExportEverywhere = 1 << 3,\n  AllowSuperOutsideMethod = 1 << 4,\n  AllowUndeclaredExports = 1 << 5,\n  Ranges = 1 << 6,\n  Tokens = 1 << 7,\n  CreateImportExpressions = 1 << 8,\n  CreateParenthesizedExpressions = 1 << 9,\n  ErrorRecovery = 1 << 10,\n  AttachComment = 1 << 11,\n  AnnexB = 1 << 12,\n}\n\ntype OptionsWithDefaults = { [P in keyof Options]-?: Options[P] };\n\nfunction createDefaultOptions(): OptionsWithDefaults {\n  return {\n    // Source type (\"script\" or \"module\") for different semantics\n    sourceType: \"script\",\n    // Source filename.\n    sourceFilename: undefined,\n    // Index (0-based) from which to start counting source. Useful for\n    // integration with other tools.\n    startIndex: 0,\n    // Column (0-based) from which to start counting source. Useful for\n    // integration with other tools.\n    startColumn: 0,\n    // Line (1-based) from which to start counting source. Useful for\n    // integration with other tools.\n    startLine: 1,\n    // When enabled, await at the top level is not considered an\n    // error.\n    allowAwaitOutsideFunction: false,\n    // When enabled, a return at the top level is not considered an\n    // error.\n    allowReturnOutsideFunction: false,\n    // When enabled, new.target outside a function or class is not\n    // considered an error.\n    allowNewTargetOutsideFunction: false,\n    // When enabled, import/export statements are not constrained to\n    // appearing at the top of the program.\n    allowImportExportEverywhere: false,\n    // TODO\n    allowSuperOutsideMethod: false,\n    // When enabled, export statements can reference undeclared variables.\n    allowUndeclaredExports: false,\n    // An array of plugins to enable\n    plugins: [],\n    // TODO\n    strictMode: null,\n    // Nodes have their start and end characters offsets recorded in\n    // `start` and `end` properties (directly on the node, rather than\n    // the `loc` object, which holds line/column data. To also add a\n    // [semi-standardized][range] `range` property holding a `[start,\n    // end]` array with the same numbers, set the `ranges` option to\n    // `true`.\n    //\n    // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n    ranges: false,\n    // Adds all parsed tokens to a `tokens` property on the `File` node\n    tokens: false,\n    // Whether to create ImportExpression AST nodes (if false\n    // `import(foo)` will be parsed as CallExpression(Import, [Identifier(foo)])\n    createImportExpressions: process.env.BABEL_8_BREAKING ? true : false,\n    // Whether to create ParenthesizedExpression AST nodes (if false\n    // the parser sets extra.parenthesized on the expression nodes instead).\n    createParenthesizedExpressions: false,\n    // When enabled, errors are attached to the AST instead of being directly thrown.\n    // Some errors will still throw, because @babel/parser can't always recover.\n    errorRecovery: false,\n    // When enabled, comments will be attached to adjacent AST nodes as one of\n    // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n    // is vital to preserve comments after transform. If you don't print AST back,\n    // consider set this option to `false` for performance\n    attachComment: true,\n    // When enabled, the parser will support Annex B syntax.\n    // https://tc39.es/ecma262/#sec-additional-ecmascript-features-for-web-browsers\n    annexB: true,\n  };\n}\n\n// Interpret and default an options object\n\nexport function getOptions(opts?: Options | null): OptionsWithDefaults {\n  // https://github.com/babel/babel/pull/16918\n  // `options` is accessed frequently, please make sure it is a fast object.\n  // `%ToFastProperties` can make it a fast object, but the performance is the same as the slow object.\n  const options: any = createDefaultOptions();\n\n  if (opts == null) {\n    return options;\n  }\n  if (opts.annexB != null && opts.annexB !== false) {\n    throw new Error(\"The `annexB` option can only be set to `false`.\");\n  }\n\n  for (const key of Object.keys(options) as (keyof Options)[]) {\n    if (opts[key] != null) options[key] = opts[key];\n  }\n\n  if (options.startLine === 1) {\n    if (opts.startIndex == null && options.startColumn > 0) {\n      options.startIndex = options.startColumn;\n    } else if (opts.startColumn == null && options.startIndex > 0) {\n      options.startColumn = options.startIndex;\n    }\n  } else if (opts.startColumn == null || opts.startIndex == null) {\n    if (opts.startIndex != null || process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"With a `startLine > 1` you must also specify `startIndex` and `startColumn`.\",\n      );\n    }\n  }\n\n  return options;\n}\n"],"mappings":";;;;;;;MAyIkBA,WAAW,GAAAC,OAAA,CAAAD,WAAA;EAAAE,yBAAA;EAAAC,0BAAA;EAAAC,6BAAA;EAAAC,2BAAA;EAAAC,uBAAA;EAAAC,sBAAA;EAAAC,MAAA;EAAAC,MAAA;EAAAC,uBAAA;EAAAC,8BAAA;EAAAC,aAAA;EAAAC,aAAA;EAAAC,MAAA;AAAA;AAkB7B,SAASC,oBAAoBA,CAAA,EAAwB;EACnD,OAAO;IAELC,UAAU,EAAE,QAAQ;IAEpBC,cAAc,EAAEC,SAAS;IAGzBC,UAAU,EAAE,CAAC;IAGbC,WAAW,EAAE,CAAC;IAGdC,SAAS,EAAE,CAAC;IAGZC,yBAAyB,EAAE,KAAK;IAGhCC,0BAA0B,EAAE,KAAK;IAGjCC,6BAA6B,EAAE,KAAK;IAGpCC,2BAA2B,EAAE,KAAK;IAElCC,uBAAuB,EAAE,KAAK;IAE9BC,sBAAsB,EAAE,KAAK;IAE7BC,OAAO,EAAE,EAAE;IAEXC,UAAU,EAAE,IAAI;IAShBC,MAAM,EAAE,KAAK;IAEbC,MAAM,EAAE,KAAK;IAGbC,uBAAuB,EAAEC,OAAO,CAACC,GAAG,CAACC,gBAAgB,GAAG,IAAI,GAAG,KAAK;IAGpEC,8BAA8B,EAAE,KAAK;IAGrCC,aAAa,EAAE,KAAK;IAKpBC,aAAa,EAAE,IAAI;IAGnBC,MAAM,EAAE;EACV,CAAC;AACH;AAIO,SAASC,UAAUA,CAACC,IAAqB,EAAuB;EAIrE,MAAMC,OAAY,GAAG3B,oBAAoB,CAAC,CAAC;EAE3C,IAAI0B,IAAI,IAAI,IAAI,EAAE;IAChB,OAAOC,OAAO;EAChB;EACA,IAAID,IAAI,CAACF,MAAM,IAAI,IAAI,IAAIE,IAAI,CAACF,MAAM,KAAK,KAAK,EAAE;IAChD,MAAM,IAAII,KAAK,CAAC,iDAAiD,CAAC;EACpE;EAEA,KAAK,MAAMC,GAAG,IAAIC,MAAM,CAACC,IAAI,CAACJ,OAAO,CAAC,EAAuB;IAC3D,IAAID,IAAI,CAACG,GAAG,CAAC,IAAI,IAAI,EAAEF,OAAO,CAACE,GAAG,CAAC,GAAGH,IAAI,CAACG,GAAG,CAAC;EACjD;EAEA,IAAIF,OAAO,CAACrB,SAAS,KAAK,CAAC,EAAE;IAC3B,IAAIoB,IAAI,CAACtB,UAAU,IAAI,IAAI,IAAIuB,OAAO,CAACtB,WAAW,GAAG,CAAC,EAAE;MACtDsB,OAAO,CAACvB,UAAU,GAAGuB,OAAO,CAACtB,WAAW;IAC1C,CAAC,MAAM,IAAIqB,IAAI,CAACrB,WAAW,IAAI,IAAI,IAAIsB,OAAO,CAACvB,UAAU,GAAG,CAAC,EAAE;MAC7DuB,OAAO,CAACtB,WAAW,GAAGsB,OAAO,CAACvB,UAAU;IAC1C;EACF,CAAC,MAAM,IAAIsB,IAAI,CAACrB,WAAW,IAAI,IAAI,IAAIqB,IAAI,CAACtB,UAAU,IAAI,IAAI,EAAE;IAC9D,IAAIsB,IAAI,CAACtB,UAAU,IAAI,IAAI,IAAIc,OAAO,CAACC,GAAG,CAACC,gBAAgB,EAAE;MAC3D,MAAM,IAAIQ,KAAK,CACb,8EACF,CAAC;IACH;EACF;EAEA,OAAOD,OAAO;AAChB","ignoreList":[]}