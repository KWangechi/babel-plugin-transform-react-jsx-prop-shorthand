{"version":3,"names":["_util","require","_location","_options","Node","constructor","parser","pos","loc","start","end","SourceLocation","optionFlags","OptionFlags","Ranges","range","filename","type","NodePrototype","prototype","process","env","BABEL_8_BREAKING","__clone","newNode","undefined","keys","Object","i","length","key","clonePlaceholder","node","cloneIdentifier","extra","name","cloned","create","expectedNode","cloneStringLiteral","raw","value","NodeUtils","UtilParser","startNode","state","startLoc","index","startNodeAt","startNodeAtNode","finishNode","finishNodeAt","lastTokEndLoc","endLoc","NODE_ENV","Error","AttachComment","processComment","resetStartLocation","resetEndLocation","resetStartLocationFromNode","locationNode","exports"],"sources":["../../src/parser/node.ts"],"sourcesContent":["import UtilParser from \"./util.ts\";\nimport { SourceLocation, type Position } from \"../util/location.ts\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types.ts\";\nimport { OptionFlags } from \"../options.ts\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: UtilParser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.optionFlags & OptionFlags.Ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: {\n    [key: string]: any;\n  };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // @ts-expect-error __clone is not defined in Node prototype\n  NodePrototype.__clone = function (): Node {\n    const newNode = new Node(undefined, this.start, this.loc.start);\n    const keys = Object.keys(this) as (keyof Node)[];\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        // @ts-expect-error cloning this to newNode\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node: any): any {\n  return cloneIdentifier(node);\n}\n\nexport function cloneIdentifier(node: any): any {\n  // We don't need to clone `typeAnnotations` and `optional`: because\n  // cloneIdentifier is only used in object shorthand and named import/export.\n  // Neither of them allow type annotations after the identifier or optional identifier\n  const { type, start, end, loc, range, extra, name } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\n\nexport function cloneStringLiteral(node: any): any {\n  const { type, start, end, loc, range, extra } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    // estree set node.raw instead of node.extra\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\n\nexport type Undone<T extends NodeType> = Omit<T, \"type\">;\n\nexport abstract class NodeUtils extends UtilParser {\n  startNode<T extends NodeType = never>(): Undone<T> {\n    const loc = this.state.startLoc;\n    return new Node(this, loc.index, loc) as unknown as Undone<T>;\n  }\n\n  startNodeAt<T extends NodeType = never>(loc: Position): Undone<T> {\n    return new Node(this, loc.index, loc) as unknown as Undone<T>;\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T extends NodeType = never>(\n    type: Undone<NodeType>,\n  ): Undone<T> {\n    return this.startNodeAt(type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T extends NodeType>(node: Undone<T>, type: T[\"type\"]): T {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T extends NodeType>(\n    node: Omit<T, \"type\">,\n    type: T[\"type\"],\n    endLoc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    (node as T).type = type;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.optionFlags & OptionFlags.Ranges) node.range[1] = endLoc.index;\n    if (this.optionFlags & OptionFlags.AttachComment) {\n      this.processComment(node as T);\n    }\n    return node as T;\n  }\n\n  resetStartLocation(node: NodeBase, startLoc: Position): void {\n    node.start = startLoc.index;\n    node.loc.start = startLoc;\n    if (this.optionFlags & OptionFlags.Ranges) node.range[0] = startLoc.index;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    endLoc: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.optionFlags & OptionFlags.Ranges) node.range[1] = endLoc.index;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.loc.start);\n  }\n}\n"],"mappings":"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","ignoreList":[]}